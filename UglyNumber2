T.c --> O(nlogn)

class Solution {
    public int nthUglyNumber(int n) {
        HashSet<Long> set = new HashSet<>();
        PriorityQueue<Long> pq = new PriorityQueue<>();
        int count = 0;
        pq.add(1l);
        set.add(1l);
        int[] primes = new int[]{2,3,5};
        long curr = 1l;
        while(count != n){
            curr = pq.poll();
            count++;
            for(int prime: primes){
                long ugly = curr*prime;
                if(!set.contains(ugly)){
                    pq.add(ugly);
                    set.add(ugly);
                }
            }
        }
        return (int) (curr);
    }
}

******************************************************************************
T.c --> O(n)
S.c --> O(1)

class Solution {
    public int nthUglyNumber(int n) {
        int p2 = 0, p3 = 0, p5 = 0;
        int n2 = 2, n3 = 3, n5 = 5;
        int[] result = new int[n];
        result[0] = 1;
        for(int i =1; i<n; i++){
           int min = Math.min(n2,Math.min(n3,n5));
           result[i] = min;
           if(min == n2){
            p2++;
            n2 = result[p2]*2;
           }
           if(min == n3){
            p3++;
            n3 = result[p3]*3;
           }
           if(min == n5){
            p5++;
            n5 = result[p5]*5;
           }
        }
        return result[n-1];
    }
}